trigger:
  batch: true
  branches:
    include:
    - master
  tags:
    include:
    - v*
pr:
  autoCancel: false
  branches:
    include:
    - '*'

variables:
  is-release: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/v')]
  package-name: 'dotnetcore-acquisition'

stages:
##### Test and Build #####
- stage: Build
  jobs:
  ##### Build #####
  - job: Build
    displayName: 'Build and Test'
    pool:
      vmImage: $(imageName)
    strategy:
      matrix:
        Linux:
          imageName: 'ubuntu-16.04'
        Mac:
          imageName: 'macos-10.13'
        Windows:
          imageName: 'vs2017-win2016'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      displayName: 'Install Node.js'
    - bash: |
        /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        echo ">>> Started xvfb"
      displayName: Start xvfb
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
    - bash: |
        npm install
        npm run compile
        npm run test
      workingDirectory: 'dotnetcore-acquisition-library'
      displayName: Build and Test dotnetcore-acquisition-library
    - bash: |
        npm install
        npm run compile
        npm run test
      workingDirectory: 'dotnetcore-acquisition-extension'
      displayName: Build and Test dotnetcore-acquisition-extension
      env:
        DISPLAY: ':99.0'
    - bash: |
        npm install
        npm run compile
      workingDirectory: 'sample'
      displayName: Build Sample
  ##### TSLint #####
  - job: TSLint
    displayName: 'TSLint'
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      displayName: 'Install Node.js'
    - bash: |
        npm install -g tslint
        tslint -c tslint.json 'dotnetcore-acquisition-library/src/**/*.ts' 'dotnetcore-acquisition-extension/src/**/*.ts'
      displayName: Run Lint
  ##### Package and Publish #####
  - job: Package
    displayName: 'Package and Publish'
    dependsOn: 
    - Build
    - TSLint
    condition: and(succeeded(), notin(variables['Build.Reason'], 'PullRequest'))
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      displayName: 'Install Node.js'
    - bash: |
        npm install
        npm run compile
      workingDirectory: 'dotnetcore-acquisition-library'
      displayName: Build dotnetcore-acquisition-library
    - bash: |
        npm install
        npm run compile
      workingDirectory: 'dotnetcore-acquisition-extension'
      displayName: Build dotnetcore-acquisition-extension
    - bash: |
        if [ $(is-release) = 'True' ]; then
          VERSION=`node -p "require('./package.json').version"`
        else
          VERSION_NUM=`node -p "require('./package.json').version"`
          VERSION="$VERSION_NUM-aplha-$(Build.BuildId)"
        fi
        npm version $VERSION --allow-same-version
        echo "##vso[task.setvariable variable=version;isOutput=true]$VERSION"
      name: GetVersion
      displayName: 'Get Version'
      workingDirectory: 'dotnetcore-acquisition-extension'
    - bash: |
        npm install -g rimraf
        npm install -g vsce
        vsce package -o $(package-name)-$(GetVersion.version).vsix
      displayName: Package Artifact
      workingDirectory: 'dotnetcore-acquisition-extension'
    - task: CopyFiles@2
      displayName: 'Copy Artifact'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**\*.vsix'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true
    - task: PublishPipelineArtifact@0
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'

##### Deploy and Release #####
- stage: DeployAndRelease
  dependsOn: Build
  condition: and(succeeded(), eq(variables['is-release'], 'true'))
  jobs:
  ##### Deploy to our release environment #####
  # Note: This step requires approval, allows for manual smoke testing the artifact before release
  - deployment: Deploy
    pool:
      vmImage: 'vs2017-win2016'
    environment: 'vscode-dotnetcore-extension-releases'
  ##### Determine version to publish #####
  - job: GetVersion
    displayName: 'Get Version'
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      displayName: 'Install Node.js'
    - bash: |
        VERSION=`node -p "require('./package.json').version"`
        echo "##vso[task.setvariable variable=version;isOutput=true]$VERSION"
      name: GetVersion
      displayName: 'Get Version'
      workingDirectory: 'dotnetcore-acquisition-extension'
  ##### Publish to marketplace #####
  - job: Publish
    displayName: 'Publish to Marketplace'
    dependsOn: 
    - Deploy
    - GetVersion
    pool:
      vmImage: 'vs2017-win2016'
    variables:
      version: $[ dependencies.GetVersion.outputs['GetVersion.version'] ]
    steps:
    - checkout: none # Skip checking out repo
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Packaged Extension'
      inputs:
        path: '$(System.ArtifactsDirectory)'
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      displayName: 'Install Node.js'
    - bash: |
        npm install -g vsce
        vsce publish --packagePath $(package-name)-$(version).vsix -p $(VSCODE_MARKETPLACE_TOKEN)
      displayName: 'Publish to Marketplace'
      workingDirectory: '$(System.ArtifactsDirectory)/drop'